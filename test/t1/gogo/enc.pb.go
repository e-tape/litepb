// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: enc.proto

package gogo

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type R1 struct {
	Uint64               uint64   `protobuf:"varint,4,opt,name=uint64,proto3" json:"uint64,omitempty"`
	Uint32               uint32   `protobuf:"varint,200,opt,name=uint32,proto3" json:"uint32,omitempty"`
	Int64                int64    `protobuf:"varint,201,opt,name=int64,proto3" json:"int64,omitempty"`
	Int32                int32    `protobuf:"varint,202,opt,name=int32,proto3" json:"int32,omitempty"`
	Sint64               int64    `protobuf:"zigzag64,203,opt,name=sint64,proto3" json:"sint64,omitempty"`
	Sint32               int32    `protobuf:"zigzag32,204,opt,name=sint32,proto3" json:"sint32,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *R1) Reset()         { *m = R1{} }
func (m *R1) String() string { return proto.CompactTextString(m) }
func (*R1) ProtoMessage()    {}
func (*R1) Descriptor() ([]byte, []int) {
	return fileDescriptor_963fa3ad3abe5788, []int{0}
}
func (m *R1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *R1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_R1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *R1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_R1.Merge(m, src)
}
func (m *R1) XXX_Size() int {
	return m.Size()
}
func (m *R1) XXX_DiscardUnknown() {
	xxx_messageInfo_R1.DiscardUnknown(m)
}

var xxx_messageInfo_R1 proto.InternalMessageInfo

func (m *R1) GetUint64() uint64 {
	if m != nil {
		return m.Uint64
	}
	return 0
}

func (m *R1) GetUint32() uint32 {
	if m != nil {
		return m.Uint32
	}
	return 0
}

func (m *R1) GetInt64() int64 {
	if m != nil {
		return m.Int64
	}
	return 0
}

func (m *R1) GetInt32() int32 {
	if m != nil {
		return m.Int32
	}
	return 0
}

func (m *R1) GetSint64() int64 {
	if m != nil {
		return m.Sint64
	}
	return 0
}

func (m *R1) GetSint32() int32 {
	if m != nil {
		return m.Sint32
	}
	return 0
}

func init() {
	proto.RegisterType((*R1)(nil), "test.R1")
}

func init() { proto.RegisterFile("enc.proto", fileDescriptor_963fa3ad3abe5788) }

var fileDescriptor_963fa3ad3abe5788 = []byte{
	// 168 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4c, 0xcd, 0x4b, 0xd6,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x29, 0x49, 0x2d, 0x2e, 0x51, 0x9a, 0xca, 0xc8, 0xc5,
	0x14, 0x64, 0x28, 0x24, 0xc6, 0xc5, 0x56, 0x9a, 0x99, 0x57, 0x62, 0x66, 0x22, 0xc1, 0xa2, 0xc0,
	0xa8, 0xc1, 0x12, 0x04, 0xe5, 0x09, 0x89, 0x43, 0xc4, 0x8d, 0x8d, 0x24, 0x4e, 0x30, 0x2a, 0x30,
	0x6a, 0xf0, 0x06, 0x41, 0xb9, 0x42, 0xa2, 0x5c, 0xac, 0x10, 0xf5, 0x27, 0x41, 0xe2, 0xcc, 0x41,
	0x10, 0x1e, 0x54, 0xd8, 0xd8, 0x48, 0xe2, 0x14, 0x48, 0x98, 0x35, 0x08, 0xc2, 0x03, 0x19, 0x53,
	0x0c, 0x51, 0x7e, 0x1a, 0x24, 0x2e, 0x14, 0x04, 0xe5, 0xc2, 0x24, 0x8c, 0x8d, 0x24, 0xce, 0x80,
	0x24, 0x04, 0x83, 0xa0, 0x5c, 0x27, 0xc5, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c,
	0xf0, 0x48, 0x8e, 0x31, 0x4a, 0x18, 0xe4, 0x56, 0xfd, 0xf4, 0xd4, 0xbc, 0xd4, 0xa2, 0xc4, 0x92,
	0xd4, 0x14, 0x7d, 0x10, 0x37, 0x89, 0x0d, 0xec, 0x0f, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x9f, 0xe2, 0x45, 0xdc, 0xd4, 0x00, 0x00, 0x00,
}

func (m *R1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *R1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *R1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Sint32 != 0 {
		i = encodeVarintEnc(dAtA, i, uint64((uint32(m.Sint32)<<1)^uint32((m.Sint32>>31))))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xe0
	}
	if m.Sint64 != 0 {
		i = encodeVarintEnc(dAtA, i, uint64((uint64(m.Sint64)<<1)^uint64((m.Sint64>>63))))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd8
	}
	if m.Int32 != 0 {
		i = encodeVarintEnc(dAtA, i, uint64(m.Int32))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd0
	}
	if m.Int64 != 0 {
		i = encodeVarintEnc(dAtA, i, uint64(m.Int64))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc8
	}
	if m.Uint32 != 0 {
		i = encodeVarintEnc(dAtA, i, uint64(m.Uint32))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc0
	}
	if m.Uint64 != 0 {
		i = encodeVarintEnc(dAtA, i, uint64(m.Uint64))
		i--
		dAtA[i] = 0x20
	}
	return len(dAtA) - i, nil
}

func encodeVarintEnc(dAtA []byte, offset int, v uint64) int {
	offset -= sovEnc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *R1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uint64 != 0 {
		n += 1 + sovEnc(uint64(m.Uint64))
	}
	if m.Uint32 != 0 {
		n += 2 + sovEnc(uint64(m.Uint32))
	}
	if m.Int64 != 0 {
		n += 2 + sovEnc(uint64(m.Int64))
	}
	if m.Int32 != 0 {
		n += 2 + sovEnc(uint64(m.Int32))
	}
	if m.Sint64 != 0 {
		n += 2 + sozEnc(uint64(m.Sint64))
	}
	if m.Sint32 != 0 {
		n += 2 + sozEnc(uint64(m.Sint32))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovEnc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEnc(x uint64) (n int) {
	return sovEnc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *R1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEnc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: R1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: R1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uint64", wireType)
			}
			m.Uint64 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uint64 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 200:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uint32", wireType)
			}
			m.Uint32 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uint32 |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 201:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64", wireType)
			}
			m.Int64 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Int64 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 202:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int32", wireType)
			}
			m.Int32 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Int32 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 203:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sint64", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Sint64 = int64(v)
		case 204:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sint32", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Sint32 = v
		default:
			iNdEx = preIndex
			skippy, err := skipEnc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEnc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEnc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEnc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEnc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEnc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEnc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEnc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEnc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEnc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEnc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEnc = fmt.Errorf("proto: unexpected end of group")
)
