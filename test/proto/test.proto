syntax = "proto3";

package test;

option go_package = "test/generated/test";

import "test2.proto";
import "test3.proto";
import "dir/test.proto";
import "dir1/test_dir.proto";
import "dir2/test_dir.proto";
import "dir/dir/test.proto";

import "common/c1.proto";
import "common/c2.proto";

enum Direction {
  NORTH = 0;
  EAST = 1;
  SOUTH = 2;
  WEST = 3;
}

message R1 {
  uint64 u64 = 1;
}

// Test message
message Test {
  // ID
  int32 id = 1;
  // Name
  string name = 2;

  test.Ok ok2 = 3;
  test3.Ok ok3 = 4;

  test3.Ok.Status status = 5;

  map<int32, Foo> kv = 6;
  map<string, sint64> kv_int = 7;

  dir.Baz baz = 8;
  dir.dir.Baz3 baz3 = 9;
  dir1.Dir1 dir1 = 10;
  dir.Dir2 dir2 = 11;

  common.C1 c1 = 12;
  common.C2 c2 = 13;

  //  option (field_number_slice_len) = 20;
  oneof oo_u {
    int32 oo_i = 20;// [(type) = "int64", (num) = 9];
    string s = 21;
    MsgForQOneof field_msg = 22;
  }
  test3.Error error = 30;
  MsgForQOneof for_oneof = 31;
  test.MsgForQOneof for_oneof_global = 32;

  repeated dir1.Dir1 r_dir1 = 39;
  repeated uint64 r_uint64 = 40;
  repeated uint32 r_uint32 = 41;
  repeated int32 r_int32 = 42;
  repeated int64 r_int64 = 43;
  int64 int64 = 44;
  int32 int32 = 45;
  uint64 uint64 = 46;
  uint32 uint32 = 47;
  sint32 sint32 = 48;
  sint64 sint64 = 49;
  repeated sint32 r_sint32 = 50;
  repeated sint64 r_sint64 = 51;
  repeated bool r_bool = 52;
  bool bool = 53;
  Direction direction_enum = 54;
  repeated Direction r_direction_enum = 55;


  // ForOneof - msg for oneof
  message MsgForQOneof {
    int32 __int = 1;
    int32 ___int2 = 2;
    int32 ____int3 = 4;
  }
  // Inner message TEST
  message Inner {
    // Inner text
    string text = 2;
    // Inner error
    test3.Error error = 3;
  }
}
// ForOneof - msg for oneof
message MsgForQOneof {
  int32 __int = 1;
}


message PreFoo {
  bool first = 1;
}

// Foo message
message Foo {
  // ID
  //    Test 123
  //Ok
  int64 id = 1; // Deprecated
  // Bars list
  repeated Bar bars = 2;
  // The bar
  Bar bar = 3;
  PreFoo pre_foo = 4;

  Status status = 5;

  // Status of FOO
  enum Status {
    // Code if OK
    OK = 0;
    // Code if ERROR
    ERROR = 1;
  }

  // Inner message
  message Inner {
    // Inner text
    string text = 1;
  }
}

message Bar {
  string text = 1;
  bool done = 2;
  // Numbers
  repeated int32 numbers = 3;
  repeated Foo.Inner foo_inner_field = 4;
}
